apiVersion: v1
kind: Namespace
metadata:
  name: games
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-nfs-k3s-emulatorjs-data
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteMany
  storageClassName: nfs
  nfs:
    server: <path:secrets/data/global#nfs-server>
    path: <path:secrets/data/global#nfs-share>
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-nfs-k3s-emulatorjs-config
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteMany
  storageClassName: nfs
  nfs:
    server: <path:secrets/data/global#nfs-server>
    path: <path:secrets/data/global#nfs-share>
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-nfs-k3s-emulatorjs-data
  namespace: games
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: nfs
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-nfs-k3s-emulatorjs-config
  namespace: games
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: nfs
  resources:
    requests:
      storage: 1Gi
---
# Source: portainer/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: emulatorjs-svc
  namespace: games
  labels:
    app: emulatorjs
spec:
  type: ClusterIP
  ports:
    - port: 80
      name: http
    - port: 3000
      name: management
    - port: 30776
      name: edge
  selector:
    app: emulatorjs
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations: {}
  labels:
    app: emulatorjs
  name: emulatorjs
  namespace: games
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: emulatorjs
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: emulatorjs
    spec:
      containers:
        - env:
            - name: PUID
              value: "1000"
            - name: PGID
              value: "1000"
          image: linuxserver/emulatorjs:1.9.0
          imagePullPolicy: Always
          name: emulatorjs
          ports:
            - containerPort: 3000
              name: management
            - containerPort: 80
              name: http
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - name: pvc-nfs-k3s-emulatorjs-config-volume
              mountPath: /config
              subPath: emulatorjs/config
            - name: pvc-nfs-k3s-emulatorjs-data-volume
              mountPath: /data
              subPath: emulatorjs/data
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
        - name: pvc-nfs-k3s-emulatorjs-config-volume
          persistentVolumeClaim:
            claimName: pvc-nfs-k3s-emulatorjs-config
        - name: pvc-nfs-k3s-emulatorjs-data-volume
          persistentVolumeClaim:
            claimName: pvc-nfs-k3s-data-config
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: emulatorjs-http
  namespace: games
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
    gethomepage.dev/href: "https://emulatorjs.k3s.wiserisk.be"
    gethomepage.dev/enabled: "true"
    gethomepage.dev/description: Emulator JS
    gethomepage.dev/group: K3S
    gethomepage.dev/icon: emulatorjs.png
    gethomepage.dev/app: emulatorjs
    gethomepage.dev/name: EmulatorJS
spec:
  rules:
    - host: emulatorjs.k3s.wiserisk.be
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: emulatorjs-svc
                port:
                  number: 80